<The Hilbert Matrix, Guide for Users>


!---------------!
1. (10 points) LU-decomposition.
Run "python lu_fact.py arg1"
arg1 must be a .dat file containing a space-separated data of the matrix, A

It will output L, U, and ||LU − A||∞ on the console.

!---------------!
2. (20 points) QR-factorization.
Run "python qr_fact_househ arg1", or "python qr_fact_givens arg1"
arg1 must be a .dat file containing a space-separated data of the matrix, A

It will output Q, R, and ||QR − A||∞ on the console.

!---------------!
3. (10 points) Solve Ax = b
Run "python solve_lu_b arg1" or "python solve_qr_b qrg1"
arg1 must be a .dat file containing a space-separated data of the augmented matrix [A|b]

It will output the solution vector xsol, and the error ||Axsol − b||.

!---------------!
4. (10 points) Solutions and Errors for Hilbert Matrix
Run "python solve_hilbert.py"

This will produce output.txt containing Xsol & errors for each n = 2, 3, .. 20.
It will be formatted as below:
n = 2
Xsol = array
|LU-H| or |QR-H| = number
|HXsol - b| = number

!---------------!
5. (10 points) Plots and discussion
Please see written.docx

It should include plots of the errors obtained for the
Hilbert matrix as a function of n. You should have 3 plots for the errors of xsol, each
obtained with LU and both QR decompositions; one for ||LU − H||∞, and two more
for ||QR − H||∞ one for each case of QR-factorization. Your plots will probably look
better in a Log scale, and can be grouped in a way that makes comparisons possible.
The discussion should address the questions posted in the description of the project.

